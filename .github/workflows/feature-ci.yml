# Feature CI Workflow
#
# Fast feedback pipeline for feature branch development.
# Uses changed-file detection for optimal performance, running only relevant validations
# based on modified files. Provides quick feedback loop for developers.
#
# Triggered on: Push to feature branches (excludes main)
# Optimization: Path-based filtering for selective execution
# Performance: 60-80% faster than full validation through smart filtering

name: Feature CI
on:
  push:
    branches-ignore: [main]

jobs:
  # Changed file detection for conditional job execution
  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      tests: ${{ steps.changes.outputs.tests }}
    steps:
      # Repository checkout for file change analysis
      - uses: actions/checkout@v4

      # Path filtering to determine which validation steps to run
      # Optimizes CI performance by running only relevant checks
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - 'package.json'
              - 'tsconfig.json'
              - 'eslint.config.mjs'
            tests:
              - 'tests/**'
              - 'vitest.config.ts'

  # Selective validation based on changed files
  validate:
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true'
    strategy:
      matrix:
        node-version: [20.x, 22.x, 24.x]
    runs-on: ubuntu-latest
    steps:
      # Repository checkout for validation execution
      - uses: actions/checkout@v4

      # Node.js setup with pnpm caching for fast dependency installation
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Enable corepack to install pnpm
      - name: Enable corepack
        run: corepack enable

      # Install dependencies using pnpm for consistent lockfile handling
      - name: Install dependencies
        run: pnpm install

      # Conditional TypeScript validation (only when source files change)
      - name: Type check
        if: needs.changes.outputs.src == 'true'
        run: pnpm typecheck

      # Conditional linting validation (only when source files change)
      - name: Lint
        if: needs.changes.outputs.src == 'true'
        run: pnpm lint

      # High-level security check for source changes
      # Uses pnpm audit for registry-specific vulnerability database
      - name: Quick security check
        if: needs.changes.outputs.src == 'true'
        run: pnpm audit --audit-level high

      # Test execution limited to changed files for performance
      - name: Test changed files
        if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true'
        run: pnpm test:changed
