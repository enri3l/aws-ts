# Documentation Build Validation and Link Checking
#
# Validates documentation builds correctly and checks for broken links.
# Cloudflare Pages handles automatic deployment from main branch.
# Ensures documentation quality and link integrity in CI pipeline.
#
# Triggered on: Push to main with docs changes, pull requests, manual dispatch
# Environment: Build validation and link checking - no deployment
# Output: Build validation and comprehensive link checking for documentation

name: Documentation
on:
  push:
    branches: [main]
    paths:
      - "docs/**" # VitePress documentation content
      - "*.md" # Root-level markdown files
      - "package.json" # Dependency changes affecting docs build
  pull_request:
    paths:
      - "docs/**"
      - "*.md"
      - "package.json"
  workflow_dispatch: # Manual validation trigger

permissions:
  contents: read # Repository content access

jobs:
  # Documentation build and validation job
  build-and-validate:
    runs-on: ubuntu-latest
    # Explicitly exclude known bot actors (Dependabot and Release-please)
    if: github.actor != 'dependabot[bot]' && github.actor != 'github-actions[bot]'
    steps:
      # Repository checkout for documentation source files
      - uses: actions/checkout@v4

      # Node.js LTS setup with pnpm caching for dependency management
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      # Enable corepack to install pnpm
      - name: Enable corepack
        run: corepack enable

      # Install dependencies including VitePress and documentation toolchain
      - name: Install dependencies
        run: pnpm install

      # Build VitePress documentation site with TypeDoc API generation
      # Generates: API docs from TSDoc, static site from markdown
      - name: Build documentation
        run: pnpm docs:build

      # Validate built documentation structure and content with graceful handling
      - name: Validate build output
        run: |
          # Core validation - these must always exist
          if [ ! -d "docs/.vitepress/dist" ]; then
            echo "❌ Build output directory missing"
            exit 1
          fi
          if [ ! -f "docs/.vitepress/dist/index.html" ]; then
            echo "❌ Index file missing from build"
            exit 1
          fi

          # Conditional validation function for documentation sections
          validate_section() {
            local section=$1
            local source_file="docs/${section}/index.md"
            local output_file="docs/.vitepress/dist/${section}/index.html"

            if [ -f "$source_file" ]; then
              if [ -f "$output_file" ]; then
                echo "✅ ${section} section built successfully"
              else
                echo "❌ ${section} section failed to build (source exists but output missing)"
                return 1
              fi
            else
              echo "ℹ️ ${section} section not yet created (skipping validation)"
            fi
            return 0
          }

          # Validate each documentation section conditionally
          validate_section "tutorials" || exit 1
          validate_section "how-to" || exit 1
          validate_section "reference" || exit 1
          validate_section "api" || exit 1

          echo "✅ Documentation build validation completed"

      # Check for broken links (internal and external)
      # Uses lychee for comprehensive link checking with optimized configuration
      - name: Check links
        uses: lycheeverse/lychee-action@v2.0.2
        with:
          # Check all HTML files in the built documentation
          args: >-
            --no-progress
            --verbose
            --accept 200,204,429,999
            --timeout 20
            --max-concurrency 8
            --exclude-all-private
            --exclude "localhost|127.0.0.1"
            --exclude "github.com/.*/(edit|blame)"
            --exclude "linkedin.com"
            --format markdown
            docs/.vitepress/dist/**/*.html
          fail: false # Don't fail initially - report issues for review
          format: detailed # Detailed output for debugging

      # Generate link checking summary
      - name: Link check summary
        if: always()
        run: |
          echo "📊 Link checking completed"
          echo "Check the 'Check links' step above for detailed results"
          echo "Note: Link check failures are reported but don't fail the workflow"
