# CI Workflow
#
# Consolidated continuous integration pipeline for all branches.
# Runs comprehensive validation on main branch and pull requests, with optimized
# validation on feature branches. Provides build status badge accuracy and complete coverage reporting.
#
# Performance Optimizations:
# - Environment-aware test timeouts (CI: 500ms vs Local: 15s for connectivity tests)
# - Optimized coverage reporting (lcov for CI, html for local development)
# - Parallel test execution with V8 coverage performance flags
#
# Triggered on:
# - Push to main (for accurate build badge status)
# - Pull requests to main (for pre-merge validation)
# - Push to feature/fix/chore branches (for developer feedback)
# Matrix: Node.js 20.x, 22.x, 24.x (LTS versions)
# Coverage: Codecov integration with OIDC (secure, tokenless)

name: CI
on:
  push:
    branches:
      - main
      - "feature/**"
      - "fix/**"
      - "chore/**"
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

permissions:
  contents: read # Repository content access
  checks: write # Post check results and status updates
  actions: read # Access to workflow run data

jobs:
  # Changed file detection for conditional job execution (feature branches only)
  changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref != 'refs/heads/main'
    outputs:
      src: ${{ steps.changes.outputs.src }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
              - 'package.json'
              - 'pnpm-lock.yaml'
            workflows:
              - '.github/workflows/**'

  validate:
    needs: [changes]
    # This job runs if the 'changes' job was successful (on a feature branch)
    # or if it was skipped (on main/PRs, where path filtering isn't needed).
    if: always() && (needs.changes.result == 'skipped' || needs.changes.result == 'success')
    strategy:
      matrix:
        node-version: [20.x, 22.x, 24.x]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      # Repository checkout with full history for semantic analysis and SonarCloud
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Install pnpm using dedicated action
      - uses: pnpm/action-setup@v4
        with:
          run_install: false

      # Node.js setup with pnpm caching for optimal performance
      - uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      # Install dependencies using pnpm with lockfile validation
      - name: Install dependencies
        run: pnpm install

      # TypeScript compilation check without emit
      - name: Type check
        if: |
          github.ref == 'refs/heads/main' ||
          github.event_name == 'pull_request' ||
          needs.changes.outputs.src == 'true' ||
          needs.changes.outputs.workflows == 'true'
        run: pnpm typecheck

      # ESLint + Markdownlint validation for code quality
      - name: Lint
        if: |
          github.ref == 'refs/heads/main' ||
          github.event_name == 'pull_request' ||
          needs.changes.outputs.src == 'true' ||
          needs.changes.outputs.workflows == 'true'
        run: pnpm lint

      # Production build validation (required before E2E tests)
      - name: Build
        if: |
          github.ref == 'refs/heads/main' ||
          github.event_name == 'pull_request' ||
          needs.changes.outputs.src == 'true' ||
          needs.changes.outputs.workflows == 'true'
        run: pnpm build

      # Security vulnerability scan using pnpm audit (main/PR only)
      - name: Security audit
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        run: pnpm audit

      # Enhanced dependency and license review (PR only)
      - name: Dependency & License Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          vulnerability-check: true
          license-check: true
          fail-on-severity: moderate

      # Package size and content validation (main/PR only)
      - name: Package validation
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        run: pnpm dlx jsr publish --dry-run

      # SonarCloud analysis
      - name: SonarCloud Scan
        if: |
          matrix.node-version == '22.x' &&
          (github.ref == 'refs/heads/main' || github.event_name == 'pull_request') &&
          (github.event.pull_request.head.repo.full_name == github.repository || github.event_name == 'push')
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
